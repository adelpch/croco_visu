# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.0b3 on Tue Jan 30 13:49:27 2018
#

import os
import wx
import numpy as np
from numpy.matlib import repmat
import numpy.ma as ma
import scipy.io
import netCDF4 as netcdf
import matplotlib.pyplot as plt
# import matplotlib
# matplotlib.use('WXAgg')
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.figure import Figure
from matplotlib import colors
from Croco import Croco

wildcard = "Netcdf Files (*.nc)|*.nc"

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

########################################################################

class SectionFrame(wx.Frame):

    def __init__(self):

        """Constructor"""

        wx.Frame.__init__(self, None, wx.ID_ANY, title='Section')

        self.panel = wx.Panel(self, wx.ID_ANY)

        self.figure = Figure()
        self.axes = self.figure.add_axes([0,0,1,1])
        self.canvas = FigureCanvas(self.panel, -1, self.figure)

        self.AnimationBtn = wx.Button(self.panel, wx.ID_ANY, "Animation")
        self.AnimationBtn.Bind(wx.EVT_BUTTON, self.onAnimationBtn)
        self.AnimationTxt = wx.TextCtrl(self.panel, wx.ID_ANY, "1", style=wx.TE_CENTRE|wx.TE_PROCESS_ENTER)
        self.AnimationTxt.Bind(wx.EVT_TEXT_ENTER, self.onAnimationTxt)
        self.ZoomInBtn = wx.Button(self.panel, wx.ID_ANY, "Zoom In")
        self.ZoomInBtn.Bind(wx.EVT_BUTTON, self.onZoomInBtn)
        self.ZoomOutBtn = wx.Button(self.panel, wx.ID_ANY, "Zoom Out")
        self.ZoomOutBtn.Bind(wx.EVT_BUTTON, self.onZoomOutBtn)
        self.PrintBtn = wx.Button(self.panel, wx.ID_ANY, "Print")
        self.PrintBtn.Bind(wx.EVT_BUTTON, self.onPrintBtn)

        self.__do_layout()

    def __do_layout(self):

        topSizer        = wx.BoxSizer(wx.VERTICAL)
        canvasSizer     = wx.BoxSizer(wx.VERTICAL)
        buttonsSizer    = wx.BoxSizer(wx.HORIZONTAL)


        canvasSizer.Add(self.canvas, 0, wx.ALL, 5)
        buttonsSizer.Add(self.AnimationBtn,0, wx.ALL, 5)
        buttonsSizer.Add(self.AnimationTxt,1, wx.ALL, 5)
        buttonsSizer.Add(self.ZoomInBtn,0, wx.ALL, 5)
        buttonsSizer.Add(self.ZoomOutBtn,0, wx.ALL, 5)
        buttonsSizer.Add(self.PrintBtn,0, wx.ALL, 5)

        topSizer.Add(canvasSizer, 0, wx.CENTER)
        topSizer.Add(buttonsSizer, 0, wx.ALL|wx.EXPAND, 5)

        self.panel.SetSizer(topSizer)
        topSizer.Fit(self)

        self.Layout()

    def onAnimationBtn(self,event):
        print("Animation")

    def onAnimationTxt(self,event):
        print("AnimationTxt")

    def onZoomInBtn(self,event):
        print("ZoomInBtn")

    def onZoomOutBtn(self,event):
        print("ZoomOutBtn")

    def onPrintBtn(self,event):
        print("Print")

########################################################################

class ProfileFrame(wx.Frame):

    def __init__(self):

        """Constructor"""

        wx.Frame.__init__(self, None, wx.ID_ANY, title='Profile')

        self.panel = wx.Panel(self, wx.ID_ANY)

        self.figure = Figure()
        self.axes = self.figure.add_axes([0.1,0.1,0.9,0.9])
        self.canvas = FigureCanvas(self.panel, -1, self.figure)

        self.ZoomInBtn = wx.Button(self.panel, wx.ID_ANY, "Zoom In")
        self.ZoomInBtn.Bind(wx.EVT_BUTTON, self.onZoomInBtn)
        self.ZoomOutBtn = wx.Button(self.panel, wx.ID_ANY, "Zoom Out")
        self.ZoomOutBtn.Bind(wx.EVT_BUTTON, self.onZoomOutBtn)
        self.PrintBtn = wx.Button(self.panel, wx.ID_ANY, "Print")
        self.PrintBtn.Bind(wx.EVT_BUTTON, self.onPrintBtn)

        self.__do_layout()

    def __do_layout(self):

        topSizer        = wx.BoxSizer(wx.VERTICAL)
        canvasSizer     = wx.BoxSizer(wx.VERTICAL)
        buttonsSizer    = wx.BoxSizer(wx.HORIZONTAL)


        canvasSizer.Add(self.canvas, 0, wx.ALL, 5)
        buttonsSizer.Add(self.ZoomInBtn,0, wx.ALL, 5)
        buttonsSizer.Add(self.ZoomOutBtn,0, wx.ALL, 5)
        buttonsSizer.Add(self.PrintBtn,0, wx.ALL, 5)

        topSizer.Add(canvasSizer, 0, wx.CENTER)
        topSizer.Add(buttonsSizer, 0, wx.ALL|wx.EXPAND, 5)

        self.panel.SetSizer(topSizer)
        topSizer.Fit(self)

        self.Layout()

    def onZoomInBtn(self,event):
        print("ZoomInBtn")

    def onZoomOutBtn(self,event):
        print("ZoomOutBtn")

    def onPrintBtn(self,event):
        print("Print")

########################################################################

class CrocoGui(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: CrocoGui.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, None, *args, **kwds)
        # self.SetSize((1560, 1047))
        self.SetSize((1200, 800))

        self.OpenFileBtn = wx.Button(self, wx.ID_ANY, "Open History File ...")
        self.OpenFileBtn.Bind(wx.EVT_BUTTON, self.onOpenFile)

        self.OpenFileTxt = wx.StaticText(self, wx.ID_ANY, " ", style=wx.ALIGN_LEFT)

        self.CrocoVariableChoice = wx.Choice(self, wx.ID_ANY, choices=["Croco Variables ..."])
        self.CrocoVariableChoice.Bind(wx.EVT_CHOICE, self.onCrocoVariableChoice)

        self.DerivedVariableChoice = wx.Choice(self, wx.ID_ANY, choices=["Derived Variables ..."])
        self.DerivedVariableChoice.Bind(wx.EVT_CHOICE, self.onDerivedVariableChoice)

        self.ResetColorBtn = wx.Button(self, wx.ID_ANY, "Reset Color")
        self.ResetColorBtn.Bind(wx.EVT_BUTTON, self.onResetColorBtn)
        self.MinColorTxt = wx.TextCtrl(self, wx.ID_ANY, "Min Color", style=wx.TE_CENTRE|wx.TE_PROCESS_ENTER)
        self.MinColorTxt.Bind(wx.EVT_TEXT_ENTER, self.onMinColorTxt)
        self.MaxColorTxt = wx.TextCtrl(self, wx.ID_ANY, "Max Color", style=wx.TE_CENTRE|wx.TE_PROCESS_ENTER)
        self.MaxColorTxt.Bind(wx.EVT_TEXT_ENTER, self.onMaxColorTxt)

        self.TimeMinusBtn = wx.Button(self, wx.ID_ANY, "<")
        self.TimeMinusBtn.Bind(wx.EVT_BUTTON, self.onTimeMinusBtn)
        self.TimeTxt = wx.TextCtrl(self, wx.ID_ANY, "Time", style=wx.TE_CENTRE|wx.TE_PROCESS_ENTER)
        self.TimeTxt.Bind(wx.EVT_TEXT_ENTER, self.onTimeTxt)
        self.TimePlusBtn = wx.Button(self, wx.ID_ANY, ">")
        self.TimePlusBtn.Bind(wx.EVT_BUTTON, self.onTimePlusBtn)

        self.LevelMinusBtn = wx.Button(self, wx.ID_ANY, "<")
        self.LevelMinusBtn.Bind(wx.EVT_BUTTON, self.onLevelMinusBtn)
        self.LevelTxt = wx.TextCtrl(self, wx.ID_ANY, "Level", style=wx.TE_CENTRE|wx.TE_PROCESS_ENTER)
        self.LevelTxt.Bind(wx.EVT_TEXT_ENTER, self.onLevelTxt)
        self.LevelPlusBtn = wx.Button(self, wx.ID_ANY, ">")
        self.LevelPlusBtn.Bind(wx.EVT_BUTTON, self.onLevelPlusBtn)

        self.LonSectionBtn = wx.Button(self, wx.ID_ANY, "Longitude Section")
        self.LonSectionBtn.Bind(wx.EVT_BUTTON, self.onLonSectionBtn)
        self.LonSectionTxt = wx.TextCtrl(self, wx.ID_ANY, "Longitude", style=wx.TE_CENTRE|wx.TE_PROCESS_ENTER)
        self.LonSectionTxt.Bind(wx.EVT_TEXT_ENTER, self.onLonSectionTxt)
        self.LatSectionBtn = wx.Button(self, wx.ID_ANY, "Latitude Section")
        self.LatSectionBtn.Bind(wx.EVT_BUTTON, self.onLatSectionBtn)
        self.LatSectionTxt = wx.TextCtrl(self, wx.ID_ANY, "Latitude", style=wx.TE_CENTRE|wx.TE_PROCESS_ENTER)
        self.LatSectionTxt.Bind(wx.EVT_TEXT_ENTER, self.onLatSectionTxt)
        self.HovmullerBtn = wx.Button(self, wx.ID_ANY, "Hovmuller")
        self.HovmullerBtn.Bind(wx.EVT_BUTTON, self.onHovmullerBtn)
        self.TimeSeriesBtn = wx.Button(self, wx.ID_ANY, "Time Series")
        self.TimeSeriesBtn.Bind(wx.EVT_BUTTON, self.onTimeSeriesBtn)
        self.VerticalProfileBtn = wx.Button(self, wx.ID_ANY, "Vertical Profile")
        self.VerticalProfileBtn.Bind(wx.EVT_BUTTON, self.onVerticalProfileBtn)

        self.Panel = wx.Panel(self, wx.ID_ANY, style=wx.BORDER_SIMPLE | wx.TAB_TRAVERSAL)

        self.figure = Figure()
        # self.figure.canvas.mpl_connect('button_press_event', self.onFigureClick)
        self.canvas = FigureCanvas(self.Panel, -1, self.figure)
        # self.canvas.mpl_connect('button_press_event', self.onFigureClick)
        # self.canvas.mpl_connect('button_release_event', self.onFigureRelease)
        # self.axes = self.figure.add_axes([0,0,1,1])
        # self.axes = self.figure.add_axes([0.1,0.1,0.9,0.9])

        self.AnimationBtn = wx.Button(self, wx.ID_ANY, "Animation")
        self.AnimationBtn.Bind(wx.EVT_BUTTON, self.onAnimationBtn)
        self.AnimationTxt = wx.TextCtrl(self, wx.ID_ANY, "1", style=wx.TE_CENTRE|wx.TE_PROCESS_ENTER)
        self.AnimationTxt.Bind(wx.EVT_TEXT_ENTER, self.onAnimationTxt)
        self.ZoomInBtn = wx.Button(self, wx.ID_ANY, "Zoom In")
        self.ZoomInBtn.Bind(wx.EVT_BUTTON, self.onZoomInBtn)
        self.ZoomOutBtn = wx.Button(self, wx.ID_ANY, "Zoom Out")
        self.ZoomOutBtn.Bind(wx.EVT_BUTTON, self.onZoomOutBtn)
        self.PrintBtn = wx.Button(self, wx.ID_ANY, "Print")
        self.PrintBtn.Bind(wx.EVT_BUTTON, self.onPrintBtn)

        self.__set_properties()
        self.__do_layout()

        # self.xlim = None
        # self.ylim = None
        # self.clim = None

        self.sectionFrame = SectionFrame()

        self.currentDirectory = os.getcwd()

        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: CrocoGui.__set_properties
        self.SetTitle("CROCO GUI")
        self.OpenFileBtn.SetMinSize((165, 35))
        self.OpenFileTxt.SetMinSize((330, 35))
        self.CrocoVariableChoice.SetMinSize((165, 35))
        self.CrocoVariableChoice.SetSelection(0)
        self.DerivedVariableChoice.SetMinSize((165, 35))
        self.DerivedVariableChoice.SetSelection(0)
        self.ResetColorBtn.SetMinSize((110, 35))
        self.MinColorTxt.SetMinSize((110, 35))
        self.MaxColorTxt.SetMinSize((110, 35))
        self.TimeMinusBtn.SetMinSize((110, 35))
        self.TimeTxt.SetMinSize((110, 35))
        self.TimePlusBtn.SetMinSize((110, 35))
        self.LevelMinusBtn.SetMinSize((110, 35))
        self.LevelTxt.SetMinSize((110, 35))
        self.LevelPlusBtn.SetMinSize((110, 35))
        self.LonSectionBtn.SetMinSize((220, 35))
        self.LonSectionTxt.SetMinSize((110, 35))
        self.LatSectionBtn.SetMinSize((220, 35))
        self.LatSectionTxt.SetMinSize((110, 35))
        self.HovmullerBtn.SetMinSize((220, 35))
        self.TimeSeriesBtn.SetMinSize((220, 35))
        self.VerticalProfileBtn.SetMinSize((220, 35))

        self.Panel.SetMinSize((900, 900))

        self.AnimationBtn.SetMinSize((110, 35))
        self.ZoomInBtn.SetMinSize((110, 35))
        self.ZoomOutBtn.SetMinSize((110, 35))
        self.PrintBtn.SetMinSize((110, 35))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: CrocoGui.__do_layout
        grid_sizer_1 = wx.FlexGridSizer(0, 2, 0, 0)
        grid_sizer_3 = wx.FlexGridSizer(2, 1, 0, 0)
        grid_sizer_8 = wx.FlexGridSizer(0, 5, 0, 0)
        grid_sizer_2 = wx.FlexGridSizer(0, 1, 0, 0)
        grid_sizer_7 = wx.FlexGridSizer(0, 2, 0, 0)
        grid_sizer_6 = wx.FlexGridSizer(3, 3, 0, 0)
        grid_sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_4 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_9 = wx.BoxSizer(wx.VERTICAL)

        grid_sizer_4.Add(self.OpenFileBtn, 0, wx.FIXED_MINSIZE, 0)
        grid_sizer_4.Add(self.OpenFileTxt, 0, wx.LEFT, 10)
        grid_sizer_2.Add(grid_sizer_4, 0, 0, 0)
        grid_sizer_5.Add(self.CrocoVariableChoice, 0, wx.FIXED_MINSIZE, 0)
        grid_sizer_5.Add(self.DerivedVariableChoice, 0, wx.FIXED_MINSIZE, 0)
        grid_sizer_2.Add(grid_sizer_5, 1, wx.EXPAND, 0)

        grid_sizer_6.Add(self.ResetColorBtn, 0, 0, 0)
        grid_sizer_6.Add(self.MinColorTxt, 0, 0, 0)
        grid_sizer_6.Add(self.MaxColorTxt, 0, 0, 0)
        grid_sizer_6.Add(self.TimeMinusBtn, 0, 0, 0)
        grid_sizer_6.Add(self.TimeTxt, 0, 0, 0)
        grid_sizer_6.Add(self.TimePlusBtn, 0, 0, 0)
        grid_sizer_6.Add(self.LevelMinusBtn, 0, 0, 0)
        grid_sizer_6.Add(self.LevelTxt, 0, 0, 0)
        grid_sizer_6.Add(self.LevelPlusBtn, 0, 0, 0)
        grid_sizer_6.AddGrowableRow(0)
        grid_sizer_6.AddGrowableRow(1)
        grid_sizer_6.AddGrowableRow(2)
        grid_sizer_6.AddGrowableCol(0)
        grid_sizer_6.AddGrowableCol(1)
        grid_sizer_6.AddGrowableCol(2)

        grid_sizer_2.Add(grid_sizer_6, 1, wx.FIXED_MINSIZE, 0)
        grid_sizer_7.Add(self.LonSectionBtn, 0, 0, 0)
        grid_sizer_7.Add(self.LonSectionTxt, 0, 0, 0)
        grid_sizer_7.Add(self.LatSectionBtn, 0, 0, 0)
        grid_sizer_7.Add(self.LatSectionTxt, 0, 0, 0)
        grid_sizer_7.Add(self.HovmullerBtn, 0, 0, 0)
        grid_sizer_7.Add((0, 0), 0, 0, 0)
        grid_sizer_7.Add(self.TimeSeriesBtn, 0, 0, 0)
        grid_sizer_7.Add((0, 0), 0, 0, 0)
        grid_sizer_7.Add(self.VerticalProfileBtn, 0, 0, 0)
        grid_sizer_7.Add((0, 0), 0, 0, 0)
        grid_sizer_7.AddGrowableRow(0)
        grid_sizer_7.AddGrowableRow(1)
        grid_sizer_7.AddGrowableRow(2)
        grid_sizer_7.AddGrowableRow(3)
        grid_sizer_7.AddGrowableRow(4)
        grid_sizer_7.AddGrowableCol(0)
        grid_sizer_7.AddGrowableCol(1)
        grid_sizer_2.Add(grid_sizer_7, 1, wx.FIXED_MINSIZE, 0)
        grid_sizer_2.AddGrowableRow(0)
        grid_sizer_2.AddGrowableRow(1)
        grid_sizer_2.AddGrowableRow(2)
        grid_sizer_2.AddGrowableRow(3)
        grid_sizer_2.AddGrowableCol(0)
        grid_sizer_1.Add(grid_sizer_2, 1, wx.EXPAND, 0)

        grid_sizer_3.Add(self.Panel, 1, 0, 0)
        grid_sizer_9.Add(self.canvas, 1, wx.EXPAND|wx.ALL, 5)
        self.Panel.SetSizerAndFit(grid_sizer_9)


        grid_sizer_8.Add(self.AnimationBtn, 0, wx.ALIGN_RIGHT, 0)
        grid_sizer_8.Add(self.AnimationTxt, 0, 0, 0)
        grid_sizer_8.Add(self.ZoomInBtn, 0, wx.ALIGN_RIGHT, 0)
        grid_sizer_8.Add(self.ZoomOutBtn, 0, 0, 0)
        grid_sizer_8.Add(self.PrintBtn, 0, 0, 0)
        grid_sizer_8.AddGrowableRow(0)
        grid_sizer_8.AddGrowableCol(0)
        grid_sizer_8.AddGrowableCol(1)
        grid_sizer_8.AddGrowableCol(2)
        grid_sizer_8.AddGrowableCol(3)
        grid_sizer_8.AddGrowableCol(4)
        grid_sizer_3.Add(grid_sizer_8, 1, wx.EXPAND, 0)
        grid_sizer_3.AddGrowableRow(0)
        grid_sizer_3.AddGrowableRow(1)
        grid_sizer_3.AddGrowableCol(0)
        grid_sizer_1.Add(grid_sizer_3, 1, wx.SHAPED, 0)
        self.SetSizer(grid_sizer_1)
        grid_sizer_1.AddGrowableRow(0)
        grid_sizer_1.AddGrowableCol(0)
        grid_sizer_1.AddGrowableCol(1)
        self.Layout()
        # end wxGlade

    def onOpenFile(self, event):
        """
        Create and show the Open FileDialog
        """
        dlg = wx.FileDialog(
            self, message="Choose a file",
            defaultDir=self.currentDirectory, 
            defaultFile="",
            wildcard=wildcard,
            style=wx.FD_OPEN | wx.FD_MULTIPLE | wx.FD_CHANGE_DIR
            )
        if dlg.ShowModal() == wx.ID_OK:
            paths = dlg.GetPaths()
        dlg.Destroy()
        self.croco = Croco(paths[0]) 
        self.OpenFileTxt.SetLabel(paths[0])            
        self.TimeTxt.SetValue(str(self.croco.times[0]))
        self.timeIndex = 0
        self.LevelTxt.SetValue(str(self.croco.crocoGrid.N))
        self.levelIndex=self.croco.crocoGrid.N - 1
        self.CrocoVariableChoice.AppendItems(self.croco.ListOfVariables)


    def onFigureClick(self,event):
        self.lonPress, self.latPress = event.xdata, event.ydata
        self.lonPressIndex,self.latPressIndex = self.findLatLonIndex(self.lonPress, self.latPress)
        self.LonSectionTxt.SetValue('%.2F' % self.lonPress)
        self.LatSectionTxt.SetValue('%.2F' % self.latPress)

    def onFigureRelease(self,event):
        self.lonRelease, self.latRelease = event.xdata, event.ydata
        self.lonReleaseIndex,self.latReleaseIndex = self.findLatLonIndex(self.lonRelease, self.latRelease)

    def findLatLonIndex(self, lonValue, latValue):
        ''' Find nearest value is an array '''
        a = abs(self.croco.crocoGrid._lon - lonValue) + \
            abs(self.croco.crocoGrid._lat - latValue)
        return np.unravel_index(a.argmin(),a.shape)
        # idx,idy = np.where(np.abs(array-value)==np.abs(array-value).min())

    def onCrocoVariableChoice(self, event):
        self.variableName = self.CrocoVariableChoice.GetString(self.CrocoVariableChoice.GetSelection())
        # var = self.CrocoVariableChoice.GetCurrentSelection()
        time = str(self.timeIndex)
        level = str(self.levelIndex)
        self.variableXY = self.croco.read_nc(self.variableName, indices= "["+time+","+level+",:,:]")
        self.clim = [np.min(self.variableXY),np.max(self.variableXY)]
        self.mincolor = np.min(self.variableXY)
        self.MinColorTxt.SetValue('%.2E' % self.mincolor)
        self.maxcolor = np.max(self.variableXY)
        self.MaxColorTxt.SetValue('%.2E' % self.maxcolor)
        self.xlim = [np.min(self.croco.crocoGrid._lon),np.max(self.croco.crocoGrid._lon)]
        self.ylim = [np.min(self.croco.crocoGrid._lat),np.max(self.croco.crocoGrid._lat)]
        self.drawxy()

    def onDerivedVariableChoice(self, event):
        self.variableName = self.DerivedVariableChoice.GetString(self.DerivedVariableChoice.GetSelection())
        # time = str(self.timeIndex)
        # level = str(self.levelIndex)
        # self.variableXY = self.croco.read_nc(self.variableName, indices= "["+time+","+level+",:,:]")
        # self.draw()

    def onResetColorBtn(self,event):
        self.mincolor = np.min(self.variableXY)
        self.MinColorTxt.SetValue('%.2E' % self.mincolor)
        self.maxcolor = np.max(self.variableXY)
        self.MaxColorTxt.SetValue('%.2E' % self.maxcolor)
        self.drawxy()

    def onMinColorTxt(self,event):
        self.mincolor = float(self.MinColorTxt.GetValue())
        self.drawxy()

    def onMaxColorTxt(self,event):
        self.maxcolor = float(self.MaxColorTxt.GetValue())
        self.drawxy()


    def onTimeMinusBtn(self,event):
        self.timeIndex = max(self.timeIndex - 1,0)
        self.TimeTxt.SetValue(str(self.croco.times[self.timeIndex]))
        self.updateVariableXY()
        self.drawxy()

    def onTimePlusBtn(self,event):
        self.timeIndex = min(self.timeIndex + 1,self.croco.crocoGrid.ntimes - 1)
        self.TimeTxt.SetValue(str(self.croco.times[self.timeIndex]))
        self.updateVariableXY()
        self.drawxy()

    def onTimeTxt(self,event):
        time = float(self.TimeTxt.GetValue())
        # find index corresponding to instant time to plot
        self.timeIndex = min( range( len(self.croco.times[:]) ), key=lambda j:abs(time-self.croco.times[j]))
        self.TimeTxt.SetValue(str(self.croco.times[self.timeIndex]))
        self.updateVariableXY()
        self.drawxy()

    def onLevelMinusBtn(self,event):
        self.levelIndex = max(self.levelIndex - 1,0)
        self.LevelTxt.SetValue(str(self.levelIndex + 1))
        self.updateVariableXY()
        self.drawxy()

    def onLevelPlusBtn(self,event):
        self.levelIndex = min(self.levelIndex + 1,self.croco.crocoGrid.N - 1)
        self.LevelTxt.SetValue(str(self.levelIndex + 1))
        self.updateVariableXY()
        self.drawxy()

    def onLevelTxt(self,event):
        self.levelIndex = int(self.LevelTxt.GetValue()) - 1
        # var = self.CrocoVariableChoice.GetCurrentSelection()
        self.updateVariableXY()
        self.drawxy()

    def onLonSectionBtn(self,event):
        time = str(self.timeIndex)
        lon = str(self.lonPressIndex)
        zeta = self.croco.read_nc('ssh', indices= "["+time+",:,:]")
        z = self.croco.crocoGrid._scoord2z('r', zeta, alpha=0., beta=0)[0][:,:,self.lonPressIndex]
        self.variableYZ = self.croco.read_nc(self.variableName, indices= "["+time+",:,:,"+lon+"]")
        x = repmat(self.croco.crocoGrid._lat[:,self.lonPressIndex].squeeze(),self.croco.crocoGrid.N,1)
        try:
            self.sectionFrame.axes.pcolormesh(x,z,self.variableYZ,vmin=self.mincolor, vmax=self.maxcolor)
        except Exception:
            self.sectionFrame = SectionFrame()
            self.sectionFrame.axes.pcolormesh(x,z,self.variableYZ,vmin=self.mincolor, vmax=self.maxcolor)

        self.sectionFrame.canvas.draw()
        self.sectionFrame.canvas.Refresh()
        self.sectionFrame.Show()



    def onLonSectionTxt(self,event):
        print("LonSection txt")

    def onLatSectionBtn(self,event):
        time = str(self.timeIndex)
        lat = str(self.latPressIndex)
        zeta = self.croco.read_nc('ssh', indices= "["+time+",:,:]")
        z = self.croco.crocoGrid._scoord2z('r', zeta, alpha=0., beta=0)[0][:,self.latPressIndex,:]
        self.variableXZ = self.croco.read_nc(self.variableName, indices= "["+time+",:,"+lat+",:]")
        x = repmat(self.croco.crocoGrid._lon[self.latPressIndex,:].squeeze(),self.croco.crocoGrid.N,1)
        try:
            self.sectionFrame.axes.pcolormesh(x,z,self.variableXZ,vmin=self.mincolor, vmax=self.maxcolor)
        except Exception:
            self.sectionFrame = SectionFrame()
            self.sectionFrame.axes.pcolormesh(x,z,self.variableXZ,vmin=self.mincolor, vmax=self.maxcolor)
        self.sectionFrame.canvas.draw()
        self.sectionFrame.canvas.Refresh()
        self.sectionFrame.Show()

    def onLatSectionTxt(self,event):
        print("Lat Section txt")

    def onHovmullerBtn(self,event):
        print("Lat Section")

    def onTimeSeriesBtn(self,event):
        lat = str(self.latPressIndex)
        lon = str(self.lonPressIndex)
        level = str(self.levelIndex)
        profile = self.croco.read_nc(self.variableName, indices= "[:,"+level+","+lat+","+lon+"]")
        try:
            self.profileFrame.axes.plot(profile)
        except Exception:
            self.profileFrame = ProfileFrame()
            self.profileFrame.axes.plot(profile)

        self.profileFrame.canvas.draw()
        self.profileFrame.Show()

    def onVerticalProfileBtn(self,event):
        time = str(self.timeIndex)
        lat = str(self.latPressIndex)
        lon = str(self.lonPressIndex)
        zeta = self.croco.read_nc('ssh', indices= "["+time+",:,:]")
        z = self.croco.crocoGrid._scoord2z('r', zeta, alpha=0., beta=0)[0][:,self.latPressIndex,self.lonPressIndex]
        profile = self.croco.read_nc(self.variableName, indices= "["+time+",:,"+lat+","+lon+"]")
        try:
            self.profileFrame.axes.plot(profile,z)
        except Exception:
            self.profileFrame = ProfileFrame()
            self.profileFrame.axes.plot(profile,z)

        self.profileFrame.canvas.draw()
        self.profileFrame.Show()


    def onAnimationBtn(self,event):
        print("Animation")

    def onAnimationTxt(self,event):
        print("AnimationTxt")

    def onZoomInBtn(self,event):
        self.xlim = [min(self.lonPress,self.lonRelease),max(self.lonPress,self.lonRelease)]
        self.ylim = [ min(self.latPress,self.latRelease),max(self.latPress,self.latRelease)]
        self.drawxy()

    def onZoomOutBtn(self,event):
        self.xlim = [np.min(self.croco.crocoGrid._lon),np.max(self.croco.crocoGrid._lon)]
        self.ylim = [np.min(self.croco.crocoGrid._lat),np.max(self.croco.crocoGrid._lat)]
        self.drawxy()

    def onPrintBtn(self,event):
        print("Print")

    def updateVariableXY(self):
        time = str(self.timeIndex)
        level = str(self.levelIndex)
        self.variableXY = self.croco.read_nc(self.variableName, indices= "["+time+","+level+",:,:]")
        self.drawxy()

    def drawxy(self):
        self.canvas.Destroy()
        self.mypcolor(self.croco.crocoGrid._lon,self.croco.crocoGrid._lat,self.variableXY,\
                      xlim=self.xlim,\
                      ylim=self.ylim,\
                      clim=self.clim)


    # -------------------------------------------------------------------------
    def plotCurv(self,x,y,xlabel=None,ylabel=None,legend=None, title = None, xlog=False, ylog=False):
        # create a figure
        # fig = plt.Figure()
     
        # and the axes for the figure
        axes = self.axes

        if y.ndim == 1:
            if legend is None:
                axes.plot(x, y, linewidth=2.0)
            else:
                axes.plot(x, y, label=legend, linewidth=2.0)
        else:
            NbCurv = y.shape[1]
            for i in range(0,NbCurv):
                if legend is None:
                    axes.plot(x, y[:,i], linewidth=2.0)
                else:
                    axes.plot(x, y[:,i], label=legend[i], linewidth=2.0)

        axes.figure.set_facecolor('white')
        axes.grid('on')
        axes.legend()
        if xlabel is not None:axes.set_xlabel(xlabel)
        if ylabel is not None:axes.set_ylabel(ylabel)        
        if xlog :axes.set_xscale('log')
        if ylog :axes.set_yscale('log')             
        if title is not None:axes.set_title(title)
        self.canvas.draw()
        self.canvas.Refresh()


    # -------------------------------------------------------------------------
    def mypcolor(self,x,y,z, \
                 x2=None,xlabel2=None, \
                 xlim=None,ylim=None,clim=None, cformat=None,\
                 norm=None,\
                 xlabel=None,ylabel=None,title=None, \
                 cmap=None, xlog=False, ylog=False, \
                 z1=None, z2=None, winsize=None, dpi = 80):

        zm = ma.masked_invalid(z)
        self.figure = Figure()
        # self.figure.canvas.mpl_connect('button_press_event', self.onFigureClick)
        self.canvas = FigureCanvas(self.Panel, -1, self.figure)
        self.canvas.mpl_connect('button_press_event', self.onFigureClick)
        self.canvas.mpl_connect('button_release_event', self.onFigureRelease)
        # self.axes = self.figure.add_axes([0,0,1,1])   
        ax = self.figure.add_subplot(111)  
        # self.axes = self.figure.add_axes([0.1,0.1,0.9,0.9])
        # plt.rc('text', usetex=True)

        # # default size if 8 x 6 inch, 80 DPI (640x480 pixels)
        # if winsize is None:
        #     winsize=[8., 6.]
        # fig.set_size_inches( (winsize[0], winsize[1]) )     
        # ax = self.figure.add_subplot(111)  
        # ax = self.axes
        
        if xlim is None: 
            ax.set_xlim((np.min(x),np.max(x)))
        else:
            ax.set_xlim((xlim[0],xlim[1]))
        if ylim is None: 
            ax.set_ylim((np.min(y),np.max(y)))
        else:
            ax.set_ylim((ylim[0],ylim[1]))  
        if xlabel is not None:ax.set_xlabel(xlabel)
        if ylabel is not None:ax.set_ylabel(ylabel)
        if title is not None:ax.set_title(title)

        if cmap is None:
            cmap=self.DefCmap()

        if clim is not None:
            mesh = ax.pcolormesh(x,y,zm,cmap=cmap,norm=norm, vmin=clim[0], vmax=clim[1])
        else:
            mesh = ax.pcolormesh(x,y,zm,cmap=cmap,norm=norm)

        if z1 is not None:
            # level1 = (z1.min() + z1.max())*0.8
            level1 = (z1.min() + 0)*0.8
            cp1 = ax.contour(x, y, z1, [level1], colors='b', linewidths=2)
        if z2 is not None:
            # level2 = (z2.min() + z2.max())*0.8
            level2 = (z2.min() + 0)*0.8
            cp2 = ax.contour(x, y, z2, [level2], colors='r', linewidths=2)

        # Add colorbar
        if cformat=='sci':
            # make sure to specify tick locations to match desired ticklabels
            self.cb = self.figure.colorbar(mesh, ax=ax, format='%.0e', ticks=[clim[0],clim[0]/10,clim[0]/100, 0, clim[1]/100,clim[1]/10,clim[1]])
            # plt.colorbar(mesh, ax=ax, format='%.0e')
        else:
            self.cb = self.figure.colorbar(mesh, ax=ax)

        if xlog :ax.set_xscale('log')
        if ylog :ax.set_yscale('log')       

        if x2 is not None: 
            ax2 = ax.twiny()
            mn, mx = ax.get_xlim()
            ax2.set_xlim(2*np.pi/mn*1e-3, 2*np.pi/mx*1e-3)
            # ax2.set_xlim(2*np.pi/mx, 2*np.pi/mn)
        if xlabel2 is not None:ax2.set_xlabel(xlabel2)
        if xlabel2 is not None and xlog :ax2.set_xscale('log')

        # font = {'family' : 'normal',
        #         'weight' : 'bold',
        #         'size'   : 18}
        # plt.rc('font', **font) 
        self.canvas.draw()
        self.canvas.Refresh()

    def DefCmap(self):
        matfile = scipy.io.loadmat('map_64_wc.mat')
        return self.array2cmap(np.array(matfile['cm']))

    def array2cmap(self,X):
        N = X.shape[0]

        r = np.linspace(0., 1., N+1)
        r = np.sort(np.concatenate((r, r)))[1:-1]

        rd = np.concatenate([[X[i, 0], X[i, 0]] for i in xrange(N)])
        gr = np.concatenate([[X[i, 1], X[i, 1]] for i in xrange(N)])
        bl = np.concatenate([[X[i, 2], X[i, 2]] for i in xrange(N)])

        rd = tuple([(r[i], rd[i], rd[i]) for i in xrange(2 * N)])
        gr = tuple([(r[i], gr[i], gr[i]) for i in xrange(2 * N)])
        bl = tuple([(r[i], bl[i], bl[i]) for i in xrange(2 * N)])


        cdict = {'red': rd, 'green': gr, 'blue': bl}
        return colors.LinearSegmentedColormap('my_colormap', cdict, N)


# end of class CrocoGui



# Run the program
if __name__ == "__main__":
    app = wx.App(False)
    frame = CrocoGui()
    frame.Show()
    app.MainLoop()