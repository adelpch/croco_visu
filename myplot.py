# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.0b3 on Tue Jan 30 13:49:27 2018
#

import sys
import os
import wx
import numpy as np
from numpy.matlib import repmat
import numpy.ma as ma
import scipy.io
import netCDF4 as netcdf
import matplotlib.pyplot as plt
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.figure import Figure
from matplotlib import colors


# -------------------------------------------------------------------------
def plotCurv(axes,x,y,xlabel=None,ylabel=None,legend=None, title = None, xlog=False, ylog=False):
# create a figure
# fig = plt.Figure()

# and the axes for the figure
# axes = self.axes

	if y.ndim == 1:
	    if legend is None:
	        axes.plot(x, y, linewidth=2.0)
	    else:
	        axes.plot(x, y, label=legend, linewidth=2.0)
	else:
	    NbCurv = y.shape[1]
	    for i in range(0,NbCurv):
	        if legend is None:
	            axes.plot(x, y[:,i], linewidth=2.0)
	        else:
	            axes.plot(x, y[:,i], label=legend[i], linewidth=2.0)

	axes.figure.set_facecolor('white')
	axes.grid('on')
	axes.legend()
	if xlabel is not None:axes.set_xlabel(xlabel)
	if ylabel is not None:axes.set_ylabel(ylabel)        
	if xlog :axes.set_xscale('log')
	if ylog :axes.set_yscale('log')             
	if title is not None:axes.set_title(title)
	self.canvas.draw()
	self.canvas.Refresh()


# -------------------------------------------------------------------------
def mypcolor(fig,x,y,z, \
         x2=None,xlabel2=None, \
         xlim=None,ylim=None,clim=None, cformat=None,\
         norm=None,\
         xlabel=None,ylabel=None,title=None, \
         cmap=None, xlog=False, ylog=False, \
         z1=None, z2=None, winsize=None, dpi = 80):

	zm = ma.masked_invalid(z)
	# # plt.rc('text', usetex=True)

	# # default size if 8 x 6 inch, 80 DPI (640x480 pixels)
	# if winsize is None:
	#     winsize=[8., 6.]
	# fig.set_size_inches( (winsize[0], winsize[1]) ) 
	ax = fig.add_axes([0.07,0.05,0.98,0.90])

	if xlim is None: 
	    ax.set_xlim((np.min(x),np.max(x)))
	else:
	    ax.set_xlim((xlim[0],xlim[1]))
	if ylim is None: 
	    ax.set_ylim((np.min(y),np.max(y)))
	else:
	    ax.set_ylim((ylim[0],ylim[1]))  
	if xlabel is not None:ax.set_xlabel(xlabel)
	if ylabel is not None:ax.set_ylabel(ylabel)
	if title is not None:ax.set_title(title)

	if cmap is None:
	    cmap=DefCmap()

	if clim is not None:
	    mesh = ax.pcolormesh(x,y,zm,cmap=cmap,norm=norm, vmin=clim[0], vmax=clim[1])
	else:
	    mesh = ax.pcolormesh(x,y,zm,cmap=cmap,norm=norm)

	if z1 is not None:
	    # level1 = (z1.min() + z1.max())*0.8
	    level1 = (z1.min() + 0)*0.8
	    cp1 = ax.contour(x, y, z1, [level1], colors='b', linewidths=2)
	if z2 is not None:
	    # level2 = (z2.min() + z2.max())*0.8
	    level2 = (z2.min() + 0)*0.8
	    cp2 = ax.contour(x, y, z2, [level2], colors='r', linewidths=2)

	# Add colorbar
	if cformat=='sci':
	    # make sure to specify tick locations to match desired ticklabels
	    cb =fig.colorbar(mesh, ax=ax, format='%.0e', ticks=[clim[0],clim[0]/10,clim[0]/100, 0, clim[1]/100,clim[1]/10,clim[1]])
	    # plt.colorbar(mesh, ax=ax, format='%.0e')
	else:
	    cb = fig.colorbar(mesh, ax=ax)

	if xlog :ax.set_xscale('log')
	if ylog :ax.set_yscale('log')       

	if x2 is not None: 
	    ax2 = ax.twiny()
	    mn, mx = ax.get_xlim()
	    ax2.set_xlim(2*np.pi/mn*1e-3, 2*np.pi/mx*1e-3)
	    # ax2.set_xlim(2*np.pi/mx, 2*np.pi/mn)
	if xlabel2 is not None:ax2.set_xlabel(xlabel2)
	if xlabel2 is not None and xlog :ax2.set_xscale('log')

	# font = {'family' : 'normal',
	#         'weight' : 'bold',
	#         'size'   : 18}
	# plt.rc('font', **font) 

def DefCmap():
	matfile = scipy.io.loadmat('map_64_wc.mat')
	return array2cmap(np.array(matfile['cm']))

def array2cmap(X):
	N = X.shape[0]

	r = np.linspace(0., 1., N+1)
	r = np.sort(np.concatenate((r, r)))[1:-1]

	rd = np.concatenate([[X[i, 0], X[i, 0]] for i in xrange(N)])
	gr = np.concatenate([[X[i, 1], X[i, 1]] for i in xrange(N)])
	bl = np.concatenate([[X[i, 2], X[i, 2]] for i in xrange(N)])

	rd = tuple([(r[i], rd[i], rd[i]) for i in xrange(2 * N)])
	gr = tuple([(r[i], gr[i], gr[i]) for i in xrange(2 * N)])
	bl = tuple([(r[i], bl[i], bl[i]) for i in xrange(2 * N)])


	cdict = {'red': rd, 'green': gr, 'blue': bl}
	return colors.LinearSegmentedColormap('my_colormap', cdict, N)